ls = list the files and folders in the current folder.

all of the commands run inside a specific folder. when we first open up the command line the commands are running inside speial folder called the HOME folder. so we have to change the folder by which we want to use(currently this Git-tutorial folder) to do that we can give this command:-


********** cd ~/Desktop/git-tutorial ************ 
[ change directory (directory is the same thing as folder) ] 

// in short we have to give the path of the folder using a prefix "cd".

if we close the command line and restart it, we are going to restart in the home directory again. now we are ready to learn git:-

now to setup git into the folder we have to use command:-

************* git init **************

this set's up git inside our current directory.

************* git status **************
this tells what changes are made since our previous versions.

here git will tell us that there is a new file config.js, a new folder src and explained file that are not being tracked in our version history which is correct as we don't have a version history yet. to create a vesion history, we have to do two things:-
pick which changes we want in our next version. to do that we'll use this command:-
********* git add ************
git gives us choice that which changes we want so we can give as:-
**************** git add config.js ***************
this will only add config.js to next version. if the file is inside the folder we have to give path to that file and not the folder name. 

now if we can't to add both config.js and src folder or all the folder and files of the current direcatory, we have to write a dot(.):-

************** git add . ***************

//this will add all the folders and files which are in the current directory(here we are in GIT-TUTORIAL therefore all the files and folder(src,config.js,explained) sub files(files inside folder) will also get added) will get added to the new version history. 

after writing the command line(git add .) we can confirm by ****** git status ******* again.

it doesn't create a new version but addes files in which we want to make changes.
------------- a version in git is called commit --------------

*********** git commit -m
//-m means we are attaching a message to this commit. we describe what we want to change so that we know what happened.

writing message "version 1". whole line = git commit -m "version 1"
here we might get an error message. this means git is requiring you to configure an email and a name to get that will be attached to your commit along with your commit message.

to get pass this error we have to run the given two commands in the error message.

after giving the email and name we'll pass the error and now we'll again write command with message to cofirm.

############ git commit -m "version 1" ##########

after this we'll run the error commands again.(name and email)

so now we have conigured name and email, let's check git history using command:-

#################### git log &&&&&&&&&&&&&&&&&

this will give us the version which we created , author name and email and date.
it'll also give us the commit message.
and yeah that's it we just learned how to add new version to our version history. later we'll learn how to go back and forth into different versions of your code. 

now create a new file 
add file to the git using "git add file name" or git add .
while adding message to the version as ****** git commit -m "version 1" --amend*** here we also used amend so instead of creating new commit, it'll add the chnaged in the prev commit
no run "git log" again.

_____________ visualising git  & git fundamentals _____________
vs code also has features for staging files which work same as command ******* git add ****** if we click on the plus sign in front of the file after making changes. You'll get this features as earphone symbol on left side navigation bar.

clicking on Plus sign on will make it ready to commit it to next version.

for ex- make changes in some files. then go to the window powershell and use *** git status ** this will tell that the changed file are not updated. after clicking on the + sign in earphone symbolic thing, run the git command again and you'll find it added and ready for commit.

this file we don't want to track so we can use command ***** git reset explained(this file name) and this will be removed from the list of items to be commited.

we can also remove changes from a file using command git checkout -- explained(file name) or use (.) for discarding changes made. it'll remove all the changes that are not added in the new version using command git commit -m. means that adding files/ staging files only makes them ready to be commited but doesn't adds the changed to next version. and when the staged files are commited the staged file disappear from the earphone symbol(source control).

__________ completing the version history__________
create 2 more versions:-
make changes in some files, add them (stage them) and then commit them using git command.

Now, in google doc version history is created automatically every once in a while because it only contains some text. but in git we can't automatically save changes to next version as their is no use of half code. because until you don't finish the code it probabbly doesn't work, so we don't really want to automatically save different versions of code that doesn't work.

_________-viewing previous versions of code__________
